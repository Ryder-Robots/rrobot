#ifndef GREEDYAI_HPP
#define GREEDYAI_HPP

#include <dlib/geometry.h>
#include <rrobot/state/state_manager.hpp>
#include <stack>
#include <vector>

namespace rrobot {

enum PSTATE {
    P_AVAILABLE,
    P_NOT_AVAIL,
};

class GreedyAi {
   public:
    PSTATE transverse(msp_delta_xy);
    void rotate(dlib::vector<float, 2>);
    bool detecto();
    void move(dlib::vector<float, 2>);
    bool is_valid(dlib::vector<float, 2>);


    std::vector<dlib::vector<float, 2>> _excl;  // points that have been excluded
    std::stack<dlib::vector<float, 2>> _trans;  // previously transversed points

    // Paths that can be transversed
    const std::vector<dlib::vector<float, 2>> res = {
        dlib::vector<float, 2>(0, 1),  // tranverse Y axis first
        dlib::vector<float, 2>(0, -1),
        dlib::vector<float, 2>(1, 0),
        dlib::vector<float, 2>(0, -1),
    };
};
}  // namespace rrobot

#endif  // GREEDYAI_HPP