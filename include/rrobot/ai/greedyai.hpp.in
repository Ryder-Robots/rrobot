#ifndef GREEDYAI_HPP
#define GREEDYAI_HPP

#include <queue>
#include <rrobot/ai/ai.hpp>
#include <rrobot/com/external.hpp>
#include <rrobot/events/serializers/serializer.hpp>
#include <rrobot/protocols/curators/multiwii/rmmsp_sensor_curator.hpp>
#include <rrobot/protocols/curators/multiwii/rmmsp_sonic_curator.hpp>
#include <rrobot/protocols/curators/multiwii/rmultiwii.hpp>
#include <rrobot/state/state_manager.hpp>
#include <vector>

namespace rrobot {

#define DELTA_DISTANCE(X1, Y1, X2, Y2) floor(sqrt(sqr(absDistance(X1, X2)) + sqr(absDistance(Y1, Y2))))

// set this as 50cm for now, may make this adjustable,  but as this is just the initial test case version.
// it may be ok till code is made more permanent.
#define OBJ_AVOID_DIST 50

// Motor control constants
#define SPEED_CRUISE 500

enum PSTATE {
    P_AVAILABLE,
    P_NOT_AVAIL,
};

class GreedyAi {
   public:
    GreedyAi(StateManager& smg, External& ext, const Environment env) : _smg(smg), _ext(ext) { init(env); }

    ~GreedyAi() { teardown(); }

    float absDistance(float n1, float n2);
    float sqr(float n);

    /**
     * @fn calcPath
     * @brief find the most viable delta, if one is available.
     * @param path queue.
     * @return returns P_AVAILABLE if a path is available, or P_NOT_AVAIL if a path is not available.
     */
    PSTATE calcPath(msp_delta_xy d);

    vector<msp_delta_xy> _explored;
    vector<msp_delta_xy> _excluded;

    bool isExplored(msp_delta_xy x);
    bool isExcluded(msp_delta_xy x);
    bool isValid(float x, float y);

    float computePenalty(float heading);
    RmMultiWii requestFeature(MSPCOMMANDS cmd);
    void sendCommand(RmMultiWii m);

   private:
    void init(Environment env);
    void teardown();

    bool isExp(msp_delta_xy x, vector<msp_delta_xy> exp);

    // list of features that can be requested or set.
    msp_sonar_altitude requestSonar();
    msp_sensor requestSensor();

    // motor motion controls
    void moveForward();

    // previously explored deltas
    StateManager& _smg;
    External& _ext;
    Crc32 _crc;
    RmMspSensorCurator _curatorSensor;
    RmMspSonicCurator _curatorSonar;
};
}  // namespace rrobot

#endif  // GREEDYAI_HPP