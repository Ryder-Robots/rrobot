#ifndef GREEDYAI_HPP
#define GREEDYAI_HPP

#include <rrobot/ai/ai.hpp>
#include <rrobot/state/state_manager.hpp>

namespace rrobot {
class GreedyAi {
   public:
    GreedyAi(StateManager& sm): _sm(sm){}
    ~GreedyAi() = default;

    PSTATE transverse(const dlib::vector<float, VECTOR_DIM>);
    void rotate(dlib::vector<float, VECTOR_DIM>);
    bool detecto();
    void move(dlib::vector<float, VECTOR_DIM>);
    bool is_valid(dlib::vector<float, VECTOR_DIM>);

   private:
    std::vector<dlib::vector<float, VECTOR_DIM>> _excl;  // points that have been excluded
    std::stack<dlib::vector<float, VECTOR_DIM>> _trans;  // previously transversed points

    // Paths that can be transversed
    const std::vector<dlib::vector<float, VECTOR_DIM>> res = {
        dlib::vector<float, VECTOR_DIM>(0, 1, 0),  // tranverse Y axis first
        dlib::vector<float, VECTOR_DIM>(0, -1, 0),

        dlib::vector<float, VECTOR_DIM>(1, 0, 0),   dlib::vector<float, VECTOR_DIM>(-1, 0, 0),

        dlib::vector<float, VECTOR_DIM>(1, 1, 0),   dlib::vector<float, VECTOR_DIM>(1, -1, 0),
        dlib::vector<float, VECTOR_DIM>(-1, -1, 0), dlib::vector<float, VECTOR_DIM>(-1, 1, 0),
    };

    StateManager& _sm;
};
}  // namespace rrobot

#endif  // GREEDYAI_HPP