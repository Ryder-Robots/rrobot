#ifndef AIBASEFUNCTION_HPP
#define AIBASEFUNCTION_HPP

#include <rrobot/ai/ai.hpp>

namespace rrobot {

/**
 * @brief provides base functions which are the concrete implementation for specific micro-processor/flight controller.
 */
class aibase {
   public:
    /**
     * @brief Rotates the entity according to the given direction vector.
     * @param direction The direction vector specifying the rotation.
     */
    virtual void rotate(dlib::vector<float, VECTOR_DIM>) = 0;

    /**
     * @brief Detects the presence of an object or condition.
     * @return True if detection is successful, false otherwise.
     */
    virtual bool detecto() = 0;

    /**
     * @brief Moves the entity in the specified direction. Serializes the moves using serialize method
     * @param direction The direction vector for movement.
     */
    void move(dlib::vector<float, VECTOR_DIM> v) {
        move_v(v);
        serialize(gen_tid(), v);
    }

    /**
     * @brief Moves the entity in the specified direction.
     * @param direction The direction vector for movement.
     */
    virtual void move_v(dlib::vector<float, VECTOR_DIM> v) = 0;

    /**
     * @brief Serialize each vector, with transaction id to storage, data can be used for training, and black box.
     */
    virtual void serialize(const long tid, dlib::vector<float, VECTOR_DIM>) = 0;

    /**
     * @brief Generate unique identifier for each transaction.
     */
    virtual long gen_tid() = 0;

    /**
     * @brief Stop robot.
     */
    virtual void stop() = 0;

    // Operations beneath are sensor operations.

    /**
     * @brief returns altra-sonic, and barometer data, Note this assumes that barometer, and altra sonic
     * are bundled in the same sensor, this is not always the case, but the implementation may make multiple
     * calls to the controller if this is the case.
     */
    virtual msp_sonar_altitude sen_sonar() = 0;

    /**
     * @brief returns availability, and acc vector.
     */
    virtual msp_sensor_acc sen_acc() = 0;

    /**
     * @brief Gyroscope sensor.
     */
    virtual msp_sensor_gyro sen_gyro() = 0;

    /**
     * @brief Magnometer sensor.
     */
    virtual msp_sensor_mag sen_mag() = 0;
};
}  // namespace rrobot

#endif  // AIBASEFUNCTION_HPP