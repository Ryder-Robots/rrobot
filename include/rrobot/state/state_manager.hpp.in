#ifndef STATE_MANAGER_HPP
#define STATE_MANAGER_HPP

#include <mutex>
#include <rrobot/state/rrpstatus.hpp>
#include <rrobot/state/state.hpp>
#include <vector>
#include <math.h>

namespace rrobot {
/**
 * @class StateManager
 * @brief
 * performs operations on state.
 */
class StateManager {
   public:
    StateManager() {
        msp_delta_xy currentLocation;
        currentLocation.set_x(0);
        currentLocation.set_y(0);
        _state.setCurrentDelta(currentLocation);
    }

    ~StateManager() {}

    /**
     * @fn getFlags
     * @brief
     * returns raw copy of flags
     */
    int32_t getFlags();

    /**
     * @fn getMode()
     * @brief
     * returns system mode.
     */
    RR_CMODES getMode();

    /**
     * @fn getStatus
     * @brief
     * returns current system status
     */
    RRP_STATUS getStatus();

    /**
     * @fn isRunning
     * @brief
     * Returns true if system is running.
     */
    bool isRunning();

    /**
     * @fn setIsRunning
     * @brief
     * will change system status to running, or non running state.ACTIVE
     * @param r true for system running, false to trigger shutdown
     */
    void setIsRunning(bool r);

    /**
     * @fn setStatus
     * @brief
     * resets the statuses, note that this should only be done from the mapper.
     */
    void setStatus(int32_t status);

    /**
     * @fn resetStatus
     * @brief
     * Should be set before checking all handlers.
     */
    void resetStatus();

    /**
     * @fn setMode
     * @brief
     * change system mode.
     */
    void setMode(RR_CMODES mode);

    /**
     * @fn setCycleTime
     * @brief
     * refer to state documenation
     */
    void setCycleTime(uint16_t v);

    /**
     * @fn getCycleTime
     * @brief
     * refer to state documenation
     */
    uint16_t getCycleTime();

    /**
     * @fn setErrorCount
     * @brief
     * refer to state documenation
     */
    void setErrorCount(uint16_t v);

    /**
     * @fn getErrorCount
     * @brief
     * refer to state documenation
     */
    uint16_t getErrorCount();

    /**
     * @fn setSensors
     * @brief
     * refer to state documenation
     */
    void setSensors(uint16_t v);

    /**
     * @fn getSensors
     * @brief
     * refer to state documenation
     */
    uint16_t getSensors();

        /**
     * @fn setFeatures
     * @brief
     * Sets the AI features for the system.
     * Refer to State documentation for details.
     * 
     * @param features The AI features to be set.
     */
    void setFeatures(AiFeatures features);

    /**
     * @fn getFeatures
     * @brief
     * Retrieves the AI features currently set for the system.
     * Refer to State documentation for details.
     * 
     * @return The AI features of the system.
     */
    AiFeatures getFeatures();

    /**
     * @fn getHeading
     * @brief return current robot heading.
     */
    float getHeading();

    /**
     * @fn setHeadingFromRadians2(x, y)
     * @brief given X, and Y cooridinates (RAD), convert to heading in degrees
     * 
     * Sumerised as:
     * 
     * | Compass Heading	| Degrees | Radians (deg × π/180) |	x (cos)	| y (sin)
     * |------------------- | --------| ----------------------|---------|---------
     * | North              |  0	  | 0.0000                | 1.0000  | 0.0000
     * | Northeast          |  45     | 0.7854                | 0.7071  | 0.7071
     * | East               | 90      | 1.5708                | 0.0000  | 1.0000
     * | South              | 180     | 3.1416                | -1.0000 | 0.0000
     * | West               | 270     | 4.7124                | 0.0000  | -1.0000
     */
    void setHeadingFromRadians2(float x, float y);

    /**
     * @fn getHeadingRadians
     * @brief given empty float populate element 0, and element 1 with radians X, and Y from current 
     */
    void getHeadingRadians(float* x, float* y);

    /**
     * @fn rotate
     * @brief rotate robot "degrees" degrees. Will not automatically update heading.  This needs to be done 
     * explicitly and should be read from  the micro-process, or magnometer. The method only returns headings 
     * that can be used in the argument to the magnometer.
     */
    void rotate(float degrees, float* x, float* y);

    /**
     * @fn setCurrentDelta
     * @brief set current robot location.
     */
    void setCurrentDelta(msp_delta_xy cdelta);

    /**
     * @fn getCurrentDelta
     * @brief returns current location of robot.
     */
    msp_delta_xy getCurrentDelta();
    

   private:
    State _state;
    std::mutex _lock;
    const int32_t DRONE_ARMED = 0 | INITILIZING | ERROR | RELOADING | SHUTTING_DOWN | TERMINATED;
};
}  // namespace rrobot

#endif