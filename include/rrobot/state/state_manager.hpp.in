#ifndef STATE_MANAGER_HPP
#define STATE_MANAGER_HPP

#include <mutex>
#include <vector>
#include <rrobot/state/rrpstatus.hpp>
#include <rrobot/state/state.hpp>

namespace rrobot {
/**
 * @class StateManager
 * @brief
 * performs operations on state.
 */
class StateManager {
   public:

   StateManager(){}

   ~StateManager(){}

   /**
    * @fn getFlags
    * @brief
    * returns raw copy of flags
    */
    int32_t getFlags();

    /**
     * @fn getMode()
     * @brief
     * returns system mode.
     */
    RR_CMODES getMode();

    /**
     * @fn getStatus
     * @brief
     * returns current system status
     */
    RRP_STATUS getStatus();

    /**
     * @fn isRunning
     * @brief
     * Returns true if system is running.
     */
    bool isRunning();

    /**
     * @fn setIsRunning
     * @brief
     * will change system status to running, or non running state.ACTIVE
     * @param r true for system running, false to trigger shutdown
     */
    void setIsRunning(bool r);

    /**
     * @fn setStatus
     * @brief
     * resets the statuses, note that this should only be done from the mapper.
     */
    void setStatus(int32_t status);

    /**
     * @fn resetStatus
     * @brief
     * Should be set before checking all handlers.
     */
    void resetStatus();

    /**
     * @fn setMode
     * @brief
     * change system mode.
     */
    void setMode(RR_CMODES mode);

    void setCycleTime(uint16_t v);

    uint16_t getCycleTime();

    void setErrorCount(uint16_t v);

    uint16_t getErrorCount();

    void setSensors(uint16_t v);

    uint16_t getSensors();


   private:
    State _state;
    std::mutex _lock;
    const int32_t DRONE_ARMED = 0 | INITILIZING | ERROR | RELOADING | SHUTTING_DOWN | TERMINATED;
};
}  // namespace rrobot

#endif