#ifndef STATE_MANAGER_HPP
#define STATE_MANAGER_HPP

#include <mutex>
#include <vector>
#include <rrobot/state/rrpstatus.hpp>
#include <rrobot/state/state.hpp>

namespace rrobot {
/**
 * @class StateManager
 * @brief
 * performs operations on state.
 */
class StateManager {
   public:
    int32_t getFlags();

    RR_CMODES getMode();

    RRP_STATUS getStatus();

    /**
     * @fn setStatus
     * @brief
     * resets the statuses, note that this should only be done from the mapper.
     */
    void setStatus(int32_t status);

    void setMode(RR_CMODES mode);

   private:
    State _state;
    std::mutex _lock;
    const int32_t DRONE_ARMED = 0 | INITILIZING | ERROR | RELOADING | SHUTTING_DOWN | TERMINATED;
};
}  // namespace rrobot

#endif