#ifndef AIAIHANDLER_HPP
#define AIAIHANDLER_HPP

#include <stack>
#include <dlib/logger.h>
#include <rrobot/events/eventhandler.hpp>
#include <rrobot/ai/aifeatures.hpp>
#include <rrobot/ai/ai.hpp>
#include <rrobot/com/external.hpp>
#include <rrobot/events/serializers/serializer.hpp>
#include <rrobot/protocols/curators/multiwii/rmultiwii.hpp>

namespace rrobot  {
    class AiHandler : public EventHandler {
        public:

        AiHandler(Ai& ai, 
            External& external, 
            Serializer<RmMultiWii, Event*>& serializer):
            _ai(ai),
            _external(external),
            _serializer(serializer) {}

        ~AiHandler() = default;
        
        bool consume(StateManager& smg, Event* event) override;

        Event* produce(StateManager& sm) override;

        bool available() {return _available;}

        string name() {return "ai_handler";}

        private:
        bool _available = false;

        Ai& _ai;
        External& _external;
        Serializer<RmMultiWii, Event*>& _serializer;
        Crc32 _crc;

        AiFeatures createFeatures(Event *);
    };
}

#endif